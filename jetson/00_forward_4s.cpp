#include <iostream>
#include "arduino.hpp"

using namespace std;

int main() {
    ArduinoCtrl controller("/dev/ttyUSB0");

    std::string message;

    // Угол поворота передних сервопривода в градусах
    // Сервопривод отвечает за поворот передних колёс автомобиля
    // 90 градусов - передние колёса стоят прямо
    // > 90 градусов - передние колёса повёрнуты налево
    // < 90 градусов - передние колёса повёрнуты направо
    // Максимальный угол поворота колёс 120 градусов, а минимальный 60 градусов
    int angle = 90,
    // Направление движения машинки
    // 1 - машинка едет вперёд
    // 0 - машинка едет назад
    // любое другое число - направление движения не определено
    direction = 0,
    // Скорость движения модели в см/с
    // Максимальная скорость движения модели 65 см/c
    // Машинка начинает ехать только если её скорость больше 27 см/с
    speed = 45;

    // Проверяем установлено ли соединение с Arduino по UART
    if (!controller.IsConnected()) {
            // Если соединение не установлено
            cout << "Arduino isn't attached." << endl;
            return 0;
    }
    // Если соединение установлено
    cout << "Arduino is attached." << endl;


    // Создаём команду для отправки на Arduino
    // Команда имеет следующий синтаксис:
    // SPD <угол поворота сервопривода>,<направление движения>,<скорость движения>
    // говорит Arduino повернуть сервопривод на 70 градусов и ехать вперёд со скоростью 45 см/c
    message = "SPD " + std::to_string(angle) + "," + std::to_string(direction) + "," + std::to_string(speed) + " ";

    // Отправляем команду на Arduino
    controller.SendCommand(message);

    sleep(4);

    // Команда остановки Arduino
    message = "SPD " + std::to_string(0) + "," + std::to_string(1) + "," + std::to_string(0) + " ";
    // Отправляем команду на Arduino
    controller.SendCommand(message);

    // Закрываем соединение с Arduino
    controller.DeInit();
    // Завершаем программу
    return 0;
}
